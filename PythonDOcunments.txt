Python Indentation
Indentation refers to the spaces at the beginning of a code line.

Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.

Python uses indentation to indicate a block of code.

For example
if 5 > 2:
    print("Five Is greater than two")  Correct Syntax

if 5 > 2:
print("Five is greater than two")  incorrect Syntax


Python Comments

Comments can be used to explain Python code.
Comments can be used to make the code more readable.
Comments can be used to prevent execution when testing code.

Creating a Comment
Comments starts with a #, and Python will ignore them:

Multi-line Comment
There is no syntax for Multi-line Comment but simply we will write # at the begining of every line

Python Variables
         Variables are containers for storing data values.
         A variable is created the moment you first assign a value to it.
    In python we do not declare variable with a particular type but only assign value  to it ..
    for example
    x=10
    print(x)
  
  Variable Names
  A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables:
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
Variable names are case-sensitive (age, Age and AGE are three different variables)

Multi Words Variable  Names
Variable names with more than one word can be difficult to read.

There are several techniques you can use to make them more readable:

Camel Case
Each word, except the first, starts with a capital letter:

myVariableName = "John"

Pascal Case
Each word starts with a capital letter:

MyVariableName = "John"

Snake Case
Each word is separated by an underscore character:

my_variable_name = "John"

Assign Values to Variables

Many Values to Multiple Variables
Python allows you to assign values to multiple variables in one line:

Example
x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)
Note: Make sure the number of variables matches the number of values, or else you will get an error.

One Value to Multiple Variables
And you can assign the same value to multiple variables in one line:

Example
x = y = z = "Orange"
print(x)
print(y)
print(z)

Unpack a Collection
If you have a collection of values in a list, tuple etc. Python allows you to extract the values into variables. This is called unpacking.

Example
Unpack a list:

fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z)

Output Variables
The Python print() function is often used to output variables.

Example
x = "Python is awesome"
print(x)

In the print() function, you output multiple variables, separated by a comma:

Example
x = "Python"
y = "is"
z = "awesome"
print(x, y, z)

You can also use the + operator to output multiple variables:

Example
x = "Python "
y = "is "
z = "awesome"
print(x + y + z)

Notice the space character after "Python " and "is ", without them the result would be "Pythonisawesome".

 Global Variables

Global Variables
Variables that are created outside of a function (as in all of the examples above) are known as global variables.

Global variables can be used by everyone, both inside of functions and outside.

Example
Create a variable outside of a function, and use it inside the function

x = "awesome"

def myfunc():
  print("Python is " + x)

myfunc()

          Global Keyword
          we use Global Keyword to make a variable global inside function
          def myfunc():
          global x
          x = "Awesome"
          myfunc()
          print("Python is " + x) 



Function=- 
          Function is block of code design to perform a particular task,,, whenever it is called,,,
          
          There are two type of function
         
         1= Built - in function,
                                 Those function are defined and pre-coded in python,,Some example of built-in function,,
                                 
                                 min(),,max(),,list(),,sum(),,type(),,print(),,len()
                                 
         2= User defined function,
                            
                                  We can create function  to specific task as per our needs such function is user defined function,,
                                  
                                  you can pass data, known as parameter, into a function,
                                 
                                 A function can return data as a result,
                                 
                Creating a Function,
                
                    
def my_function():
  print("Hello word")


            Calling a Function,

my_function()

              Argument=-
                           Information can be passed into function as argument,
                           
def my_function(fname):
    print(fname + "khattak")
    
    my_function("Amjad")                           
    my_function("Tufail")
          
                         
def my_function(fname, lname):
    print(fname +"" + lname)
    
    my_function("Amjad", "khan")                           
             
                         
                               
a = 9
b = 8
gmean1=(a*b)/(a+b)
print(gmean1) 
c=8
d=7
gmean2=(c*d)/(c+d)
print(gmean2)                                  
def calculateGmean(a,b):
 print(a+b)
a=9
b=7
calculateGmean(a,b)

c=4
d=8
calculateGmean(c,d)

def calculateGmean(a,b):
     print(a+b)
a=8
b=6
if(a>b):
       print("First number is greater")
else:
  print("Second number is greater")
  calculateGmean(a,b)    
c=5
d=5
calculateGmean(c,d)


